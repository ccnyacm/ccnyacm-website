{"version":3,"sources":["pages/Error.js","components/Event/EventComponentMUI.jsx","components/EventList/EventListComponentMUI.jsx","pages/Events.js","components/ScrollToTop/style.js","components/ScrollToTop/ScrollToTop.js","components/ElevationScroll/ElevationScroll.js","components/NavBar.js","routes/PublicRouter.js","index.js","routes/AppRouter.js"],"names":["Error","useStyles","makeStyles","card","maxWidth","justifyContent","floatLeft","bullet","display","margin","transform","title","fontSize","pos","marginBottom","media","height","paddingTop","typography","textAlign","EventCard","props","classes","Card","className","id","event","CardHeader","subheader","host","CardMedia","image","eventImage","CardContent","Typography","date","timeStart","timeEnd","description","href","url","EventList","Grid","container","spacing","events","map","item","key","formatDate","day","substring","Events","state","hackathons","getMLHEvents","a","async","fetch","res","json","setState","today","Date","dd","String","getDate","padStart","mm","getMonth","filteredHackathons","filter","hackathon","isHighschool","isHighSchool","startDate","month","forEach","imageUrl","location","endDate","name","this","slice","Component","theme","root","position","bottom","right","ScrollToTop","intervalId","children","scrollStep","delayInMS","trigger","useScrollTrigger","disableHysteresis","threshold","scrollToTopStep","window","pageYOffset","clearInterval","scroll","left","top","Zoom","in","onClick","setInterval","role","ElevationScroll","React","cloneElement","elevation","NavBar","CssBaseline","AppBar","Toolbar","edge","aria-label","variant","color","component","Link","to","PureComponent","PublicRoute","rest","Fab","size","KeyboardArrowUp","createMuiTheme","palette","primary","main","secondary","background","text","hint","ReactDOM","render","ThemeProvider","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.cd90ef99.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Error = () => <h1>Not found</h1>;\n","/** \n * Note, at first I was about to create the card content myself, \n * However, I forgot that we said we were going to use Material UI components! (Which has cards!)\n */\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\n\n/** NOTE, this page creates the Card, by calling Material UI, and passing props through parent Event */\n\n\nconst useStyles = makeStyles({\n    card: {\n      maxWidth: 275, /** SETTING A MAX WIDTH so that images size and everything wraps! */\n      justifyContent: 'center',\n      floatLeft: '10%'\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)',\n    },\n    title: {\n      fontSize: 14,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n    media: {\n        //maxWidth: 275,\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n      },\n    typography:{\n        textAlign: 'center'\n    }\n\n  });\n\n\n\nexport const EventCard = (props) => {\n    const classes = useStyles();\n\n    return(\n    <div>\n        <Card className={classes.card} id={props.event.id}>\n            <CardHeader\n                title={props.event.title}\n                subheader={/* \"Hosted By \" +  // Had to remove hosted by, because host will then print undefined if null. ReactDOM is smart  enough to not add attributes if its set to NULL!*/props.event.host}\n            />\n            <CardMedia\n                className={classes.media}\n                image={props.event.eventImage}\n                title=\"Bujar\" /** The image should describe the event! */\n            />\n            <CardContent>\n                <Typography className={classes.typography}>When: {props.event.date}</Typography>\n                <Typography className={classes.typography}>Time: {props.event.timeStart} to {props.event.timeEnd}</Typography>\n                <Typography>{props.event.description}</Typography>\n                <Typography><a href={props.event.url}>{props.event.url}</a></Typography>\n            </CardContent>\n        </Card>\n    </div>\n    );\n\n}","import React from 'react';\nimport {EventCard} from '../Event/EventComponentMUI'\nimport Grid from \"@material-ui/core/Grid\";\n\nexport const EventList = (props) => {\n    return(\n        <div>\n            <h2>{props.title}</h2>\n            {/** We can edit this later to make it like a time-line, similar to old website */}\n            <Grid container spacing={2}>\n            {\n                props.events.map(  event => \n                                    <Grid item> \n                                        <EventCard key={event.id} event={event}> \n                                        </EventCard>\n                                    </Grid>) \n            }\n            </Grid>\n        </div>\n    )\n}","import React from 'react';\nimport {Component} from 'react';\n/* import {EventCard} from '../components/Event/EventComponentMUI'*/\n/*import Grid from \"@material-ui/core/Grid\";*/\nimport {EventList} from '../components/EventList/EventListComponentMUI'\n/** \n * We can create components such as Event List, which desing all the events nicely\n * We can create an event/card component, which has the details of each event (And call/generate them via Event List )\n */\n\n/**\n * Some notes on how I vision the design of this. \n * We have two columns, 70% CCNY Events, 30% Outside events/potentially evenet brite\n * Another alternative,\n * Rows: \n *  Row of Our events\n *  Row of Event Brite Events\n *  Row of MLH events. \n *  (And these would be in turnstile/gallery method)\n */\n\n\n\n\n\nfunction formatDate(date) {\n    /** Numerically indexed */\n    /*var monthNames = [\n      \"January\", \"February\", \"March\",\n      \"April\", \"May\", \"June\", \"July\",\n      \"August\", \"September\", \"October\",\n      \"November\", \"December\"\n    ];*/\n  \n    /** NOTE, this SHOULD be edited to find '-' and then store year/day/month. \n     * This will ensure more proper written code (OTHERWISE WHAT I HAVE IS HANDWRITTEN!)\n     */\n    const day = date.substring(8);\n    //const month = parseInt(date.substring(5,7)) - 1; /** Januaray = 1 thus need 0! */\n    const month = date.substring(5,7);\n    const year = date.substring(0, 4);\n\n  \n    //return monthNames[month] + ' ' + day +  ' ' + year;\n    return month +  '/' + day +  '/' + year;\n  }\n\n\n\n\n\nclass Events extends Component {\n    /** Set the data that we need for this page. (NOTE if we transition to single page app,\n     * we can move this all to props.) */\n    constructor(){\n        super();\n        this.state = {\n            /** Note, we may want \"dates\" instead of date */\n\n            events: [\n                {id: 'ccny1', url:'', title: 'Mock Technical Interview Session', host: '', description:'Join ACM for our third Mock Interview Session on solving technical problems! This week\\'s topics is strings!', date:'1/25/2020', timeStart:'1:00pm', timeEnd:'3:00pm', eventImage:'http://theinterviewpro.com/wp-content/uploads/2016/05/Mock-Interview.png'}\n            ],\n            hackathons: []\n        };\n        //this.getMLHEvents = this.getMLHEvents.bind(this);\n    }\n\n\n    /** Pull in the events from the database */\n    componentDidMount(){\n\n        /** First time using async await ==> Declare outer function asyhronous so it works the same */\n        const getMLHEvents = async () => {\n            \n            /** First get the response + store it. Declare as await so the rest of the numbers will pause */\n            const res = await fetch('https://mlh-events.now.sh/na-2020');\n            /** Converting to JSON is also an await process */\n            const hackathons = await res.json(); \n            //console.log(res);\n            //console.log(\"Okay await async seems to work\");\n            //console.log(hackathons);\n            this.setState({hackathons: hackathons}); /** SETTING IT JUST TO SET IT! NOT ACTUALLY GOING TO USE THIS! */\n            //console.log(\"Converted to arrow function to be able to set state \\'AutoBinding\\' \");\n            //console.log(this.state.hackathons);\n            //console.log(\"Wverything seems fine up to here!\")\n\n\n            /** After we get the hackathons, we want to filter them, \n             * to only show the hackathons past current date and college level\n             * Location does not actually show AREA (Would have been nice to filter for NY,NJ,PA) \n             * \n             * Notice that the event cards that i created call different named properities,\n             * Thus, we also need to rename the kay utalized in each!, and give each an id number. \n             * */\n\n            //const hackathons = this.state.hackathons; /** Get the list of hackathons -- After it has been set */\n            //Reuse the same variable of Hackathons!\n            var today = new Date();\n            var dd = String(today.getDate()).padStart(2, '0');\n            var mm = String(today.getMonth()+1).padStart(2, '0'); /** Januaray Starts at 0 */\n\n            //console.log(hackathons);\n            //console.log(\"Day:\" + dd);\n            //console.log(\"Month:\" + mm);\n\n            const filteredHackathons = hackathons.filter(  hackathon => {  \n                                                const isHighschool = hackathon.isHighSchool; \n                                                const date = hackathon.startDate;\n                                                /** NOTE, this isn't a long term solution. \n                                                 * Might be better to find dashes - and then parse month + day from that  */ \n                                                const day = date.substring(8);\n                                                const month = date.substring(5,7);\n\n                                                /** First check that its a college appropriate hackathon */\n                                                if(!isHighschool){\n                                                    if(month > mm){\n                                                        return hackathon;\n                                                    }else if(month===mm && day >= dd ){\n                                                        /** If its the same month, make sure day is on or past */\n                                                        return hackathon;\n                                                    }\n                                                }\n            }   )\n\n            //console.log(filteredHackathons); /** Let's see if we actually did something up to this point lol */\n\n            let id = 1; /** This can't be constant! */\n            /** NEED to find a better way to assign an id to each hackathon \n             * (As it CANNOT interfer) with other values.\n             * What I am doing, is appending mlh to the front of the value! \n             * That way id variable can continue to increase. \n            */\n           // const keyAdjustedHackathons = //Originally used .map however didn't work! Use same array and call forEach! \n            filteredHackathons.forEach( hackathon => {\n                                                        hackathon['id']= 'mlh'+id;\n                                                        id++; /** Incremeent ID */\n                                                        hackathon['eventImage'] = hackathon.imageUrl; /** Rename */ \n                                                        hackathon['date'] = hackathon.location; /** NOTE, we have to use the location as the DATE! [Hopefully this parameter doesn't change in the future, otherwise it will produce un-predicted results] */\n                                                        /**NOTE, A Hackathon DOES NOT have START-END TIME. However, I use when and NOT time: therefore we will utalize the dates in place of time */\n                                                        /** FORMAT FUNCTION created outside of class! */\n                                                        hackathon['timeStart'] = formatDate(hackathon.startDate); /** Another Alternative to no time is simply saying \"NA? but that's pretty bad...\" */\n                                                        hackathon['timeEnd'] = formatDate(hackathon.endDate);\n                                                        hackathon['title'] = hackathon.name;\n\n                                                        /** NOTE, we can either choose to keep the hackathon original keys (Just for reference)\n                                                         * However, I am just deleteing them to \"save space\" \n                                                         * NOTE, I haven't really worked much with this to know if it is a tradeoff\n                                                         */\n                                                        delete hackathon.name;\n                                                        delete hackathon.startDate;\n                                                        delete hackathon.endDate;\n                                                        delete hackathon.imageUrl;\n\n         })\n        //console.log(filteredHackathons);\n        this.setState({hackathons: filteredHackathons});\n        }\n\n        /** We needed a way to call the function to be able to make the API CALL!!! */\n        (async () => {\n            await getMLHEvents();\n        })();\n\n\n    }\n\n    /** This is the function that React 'robot' calls to generate the page */\n    render() {\n        return(\n            <div>\n                <h1> This is the events Page </h1>\n                <EventList\n                    title=\"CCNY Events\"\n                    events={this.state.events}\n                ></EventList>\n                \n                {/** Even for the event brite events, we only can limit up to 8, as you can see its a lot. */}\n                <EventList\n                    title=\"Hackathon Events\"\n                    events={this.state.hackathons.slice(0,8) /** NOTE, WE WANT ONLY 8 ELEMENTS! Otherwise we will be overloaded with events! */}\n                ></EventList>\n                \n                {/** WHen we pull the MLH hackathon stuff, we need to pull based on close state, and then include a link at the bottoms that says \n                \" for more hacakthons see this (Filter set to NY/NJ/PA ??? I think that's reasonable\" */}\n\n            </div>\n        );\n    }\n\n\n}\n\nexport default Events;","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'fixed',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Zoom, useScrollTrigger } from '@material-ui/core';\nimport { useStyles } from './style';\n\nexport const ScrollToTop = (props) => {\n  const { children, scrollStep, delayInMS } = props;\n  const classes = useStyles();\n  let intervalId;\n\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 100,\n  });\n\n  const scrollToTopStep = () => {\n    if (window.pageYOffset === 0) {\n      clearInterval(intervalId);\n    }\n    window.scroll({\n      left: 0,\n      top: window.pageYOffset - scrollStep,\n    });\n  };\n\n  const handleClick = () => {\n    intervalId = setInterval(scrollToTopStep, delayInMS);\n  };\n\n  return (\n    <Zoom in={trigger}>\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\n        {children}\n      </div>\n    </Zoom>\n  );\n};\n\nScrollToTop.propTypes = {\n  children: PropTypes.element.isRequired,\n  scrollStep: PropTypes.number.isRequired,\n  delayInMS: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport { useScrollTrigger } from '@material-ui/core';\n\nexport const ElevationScroll = (props) => {\n  const { children } = props;\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n  });\n\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0,\n  });\n};\n","import React, { PureComponent } from \"react\";\nimport { Link } from 'react-router-dom';\nimport {\n  AppBar, Toolbar, Button, Typography,\n} from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport ForumRoundedIcon from '@material-ui/icons/ForumRounded';\nimport { ElevationScroll } from './ElevationScroll';\n\nclass NavBar extends PureComponent {\n  render() {\n    const classes = {};\n\n    return (\n      <div className={classes.root}>\n        <CssBaseline />\n        <ElevationScroll>\n          <AppBar position=\"fixed\">\n            <Toolbar>\n              <ForumRoundedIcon edge=\"start\" aria-label=\"UniFree-forum\" />\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.title} component={Link} to=\"/\">\n                UniFree\n            </Typography>\n            </Toolbar>\n          </AppBar>\n        </ElevationScroll>\n      </div>\n    );\n  }\n}\n\nexport { NavBar };\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { func } from 'prop-types';\nimport { Fab, Toolbar } from '@material-ui/core';\nimport { KeyboardArrowUp } from '@material-ui/icons'\nimport { ScrollToTop } from '../components/ScrollToTop';\nimport { NavBar } from '../components/NavBar';\n\nexport const PublicRoute = ({\n  component: Component,\n  ...rest\n}) => (\n  <Route\n    {...rest}\n    component={(props) => (\n      <>\n        <NavBar />\n        <Toolbar />\n        <Component {...props} />\n        <ScrollToTop scrollStep={100} delayInMS={16.6}>\n          <Fab color=\"inherit\" size=\"small\" aria-label=\"scroll back to top\">\n            <KeyboardArrowUp />\n          </Fab>\n        </ScrollToTop>\n      </>\n    )}\n  />\n);\n\nPublicRoute.propTypes = {\n  component: func.isRequired,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { AppRouter } from './routes/AppRouter';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#3B72AE',\n        },\n        secondary: {\n            main: '#333333',\n        },\n        background: {\n            main: '#fff',\n        },\n        text: {\n            primary: '#464646',\n            secondary: '#3B72AE',\n            hint: '#f3cf45',\n        },\n    },\n});\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <AppRouter />\n    </ThemeProvider>,\n    document.getElementById('root'),\n);\n","import React from 'react';\nimport { BrowserRouter as Router, Switch } from 'react-router-dom';\nimport { Error } from '../pages/Error'\nimport { Home } from '../pages/Home';\nimport Events from '../pages/Events';\nimport { PublicRoute } from './PublicRouter';\n\nexport const AppRouter = () => (\n  <Router>\n    <Switch>\n      {/** Changing this to events for my purporses of testing */}\n      <PublicRoute exact path=\"/\" component={Events} />\n      <PublicRoute path=\"*\" component={Error} />\n    </Switch>\n  </Router>\n);\n"],"sourceRoot":""}